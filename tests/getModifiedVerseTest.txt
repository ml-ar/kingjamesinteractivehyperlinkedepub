function ltrim(s) { sub(/^[ \t\r\n]+/, "", s); return s }
function rtrim(s) { sub(/[ \t\r\n]+$/, "", s); return s }
function trim(s) { return rtrim(ltrim(s)); }

#just like gensub, except it works on literals instead of regexes
function literalgensub(literalPattern, literalSubstitution, number, string,  toReturn,  position,  mutilatedString,  matchArray,  i)
{

	toReturn = ""


	mutilatedString = string

		if (!match(number,/^[Gg]/) && !match(number,/^[[:digit:]]+/))
		{
			number = 1
		}


	if (!(position = index(string, literalPattern)))
	{
		return string;
	}


	if (match(number,/^[Gg]/)) #replace all
	{
		while (position = index(mutilatedString, literalPattern))
		{
			toReturn = toReturn substr(mutilatedString, 1, position-1)
				toReturn = toReturn literalSubstitution
				mutilatedString = substr(mutilatedString, position+length(literalPattern))
		}
	}
	else if (match(number,/^([[:digit:]]+)/, matchArray))
	{
		for (i = 0; i < matchArray[0]; ++i)
		{
			position = index(mutilatedString, literalPattern)
				toReturn = toReturn substr(mutilatedString, 1, position-1)
				toReturn = toReturn literalSubstitution
				mutilatedString = substr(mutilatedString, position+length(literalPattern))
		}
	}
       else
       {
	       print "ERROR: literalgensub bug, could not find the number of iterations."; exit 17;
       }
	toReturn = toReturn mutilatedString

		return toReturn;


}

function lastIndex(stringToCheck, inMe,  mutilatedString,  pointer,  lastPosition)
{
   if (!inMe)
   {
    print "FATAL ERROR: empty string passed to lastIndex. This was the string to check: \n" stringToCheck
    exit 1
   }
	mutilatedString = stringToCheck;
	pointer = 1;
	while (lastPosition = index(mutilatedString, inMe))
	{
		mutilatedString = substr(mutilatedString, ++lastPosition)
			pointer += lastPosition - 1

	}
	return pointer-1;
}



function getModifiedVerse(fullVerseLine, precedingWords, footnoteSymbol, footnoteNumber,  verseTextOnly,  splitArray,  matchArray,  sepsArray,  severedSepBefore,  severedSepAfter,  found,  position,  toReturn,  o,  PREVIOUSIGNORECASE)
{

	if (!precedingWords || match(precedingWords,/^\s*$/)) #there are no preceding words; simply put the footnote after the spans that mark the beginning of the line
	{
		if (!match(fullVerseLine, /[\n^](<[^<]+<\/[^>]+>)*(¶\s*)?(<a href='#FN[^>]+>[^<]+<[^>]+>)*/, matchArray)) #the last parenthesis in the regex is to avoid multiple footnotes at the beginning
		{
			print "ERROR: Could not find start of verse spans in " fullVerseLine; exit 18 
		}

		toReturn = matchArray[0] "<a href='#FN"footnoteNumber"' epub:type='noteref' class='noteref'>"footnoteSymbol"</a>" matchArray[2] #now add the footnote symbol (don't forget the paragraph symbol)
			toReturn = toReturn substr(fullVerseLine, length(matchArray[0])+1) #add the rest of the verse
			return toReturn


	}


	PREVIOUSIGNORECASE = IGNORECASE
		IGNORECASE = 1
		found = ""
		toReturn = ""
#now we split the matched verse into its constituent parts
		split(fullVerseLine, splitArray, /(<[^>]+>)|(<a href='#FN[^>]+>[^<]+<[^>]+>)|([[:digit:]]+&#[[:digit:]]+;)|(¶)|(\s*[\n$]\s*)/, sepsArray)


		verseTextOnly = ""
	
		for (o in splitArray)
		{ 
			verseTextOnly = verseTextOnly "" splitArray[o]
			verseTextOnly = gensub(/^\s*/,"","1",verseTextOnly) #this is necessary because when you grab the lines from the xhtml, there's usually a space at the beginning after the verse identifier
print "BEFORE:"
print "splitArray["o"]=" splitArray[o]";"
print "sepsArray["o"]=" sepsArray[o]";"
print "verseTextOnly=" verseTextOnly";"
print "toReturn=" toReturn ";"
				if (position = index(verseTextOnly,precedingWords) && !found) #we found the section in the xhtml where the footnote is to be inserted
				{
print "FOUND :"
					found = "ja"
						position = length(precedingWords)
if (position < length(verseTextOnly))
{
print "POSITION="position "; length(verseTextOnly)="length(verseTextOnly)
						severedSepAfter = substr(verseTextOnly, position+1)
print "severedSepAfter="severedSepAfter ";"
						if (!(position = lastIndex(splitArray[o], severedSepAfter)))
						{
							print "ERROR LOL"; exit 19
						}
					severedSepBefore = substr(splitArray[o], 1, position-1);
print "severedSepBefore="severedSepBefore ";"
					splitArray[o] = severedSepBefore "<a href='#FN"footnoteNumber"' epub:type='noteref' class='noteref'>"footnoteSymbol"</a>" severedSepAfter
}
else
{
splitArray[o] = splitArray[o] "<a href='#FN"footnoteNumber"' epub:type='noteref' class='noteref'>"footnoteSymbol"</a>"
}
				}
			toReturn = toReturn splitArray[o] sepsArray[o]

print "AFTER:"
print "splitArray["o"]=" splitArray[o]";"
print "sepsArray["o"]=" sepsArray[o]";"
print "verseTextOnly=" verseTextOnly";"
print "toReturn=" toReturn ";"
		}
	if (!found)
	{
		print "ERROR: Could not find " precedingWords " in (" fullVerseLine "). There is likely an issue with the regex or string parsing.\n verseTextOnly = " verseTextOnly "; precedingWords = " precedingWords; exit 16;
	}
	IGNORECASE = PREVIOUSIGNORECASE
		return toReturn

}

BEGIN {
OFS = ""
}

/All the souls that came with Jacob into Egypt, which came out of his / {
print "PRINTING: "
modifiedVerse = getModifiedVerse($0, "All the souls that came with Jacob into Egypt, which came out of his ", "*", 1)
print "MODIFIED VERSE: "
print modifiedVerse
}

/vowedst a vow unto me/ {
print "PRINTING: "
modifiedVerse = getModifiedVerse($0, "I am the God of Beth-el, ", "*", 1)
print "MODIFIED VERSE: "
print modifiedVerse
}


/and breathed into his nostrils the breath of life/ {
print "PRINTING: "
modifiedVerse = getModifiedVerse($0, "And the LORD God formed man ", "*", 1)
print "MODIFIED VERSE: "
print modifiedVerse;
print "PRINTING: "
modifiedVerse = getModifiedVerse(modifiedVerse, "And the LORD God formed man of the ", "∥", 1)
print "MODIFIED VERSE: "
print modifiedVerse;
}


/abundantly the moving creature that hath life/{
modifiedVerse = getModifiedVerse($0, "And God said, ", "*", 1)
print modifiedVerse;
modifiedVerse = getModifiedVerse(modifiedVerse, "And God said, Let the waters bring forth abundantly the ","∥",2)
print modifiedVerse;
modifiedVerse = getModifiedVerse(modifiedVerse, "And God said, Let the waters bring forth abundantly the moving creature that hath ","†",3)
print modifiedVerse;
modifiedVerse = getModifiedVerse(modifiedVerse, "And God said, Let the waters bring forth abundantly the moving creature that hath life, and fowl that may fly above the earth in the ","†",4)
print modifiedVerse
}

/In the beginning God created the heaven and the earth./ {
print getModifiedVerse($0, "In the ", "*", 1)

} 
